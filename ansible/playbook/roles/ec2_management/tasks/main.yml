#Tasks related to EC2 management
- name: Delete existing SSH key file
  ansible.builtin.file:
    path: "~/.ssh/{{ key_name }}.pem"
    state: absent

- name: Generate RSA private key
  community.crypto.openssh_keypair:
    path: "~/.ssh/{{ key_name }}.pem"
    type: rsa
    size: 4096
  register: generated_key

- name: Delete existing public key file
  ansible.builtin.file:
    path: "{{ key_name }}_public_key.pem"
    state: absent   

- name: Save public key
  copy:
    content: "{{ generated_key.public_key }}"
    dest: "{{ key_name }}_public_key.pem"
  when: generated_key is defined

- name: Ensure private key file permissions
  ansible.builtin.file:
    path: "~/.ssh/{{ key_name }}.pem"
    mode: '0400'
  when: generated_key is defined

- name: Upload public key to AWS
  ec2_key:
    name: "{{ key_name }}"
    key_material: "{{ lookup('file', '{{ key_name }}_public_key.pem') }}"
    region: "{{ region }}"

- name: Gather information about the existing instance
  amazon.aws.ec2_instance_info:
    region: "{{ region }}"
    filters:
      "tag:Name": "{{ ec2_instance_name }}"
      "instance-state-name": "running"
  register: ec2_info

- name: Output gathered EC2 instance information
  debug:
    var: ec2_info.instances[0].instance_id

- name: Terminate existing EC2 instance
  amazon.aws.ec2_instance:
    region: "{{ region }}"
    state: absent
    instance_ids: "{{ ec2_info.instances[0].instance_id }}"
  when: ec2_info.instances|length > 0

- name: Launch EC2 instance
  amazon.aws.ec2_instance:
    name: "{{ec2_instance_name}}"
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ image }}"
    wait: yes
    region: "{{ region }}"
    network:
      assign_public_ip: true
    security_groups:
      - "{{ security_group.group_id }}"  # Use the security group ID
  register: ec2

- name: Add new instance to host group
  ansible.builtin.add_host:
    name: "{{ item.public_ip_address }}"
    groupname: launched
    ansible_user: "{{ ansible_ssh_user }}"
  loop: "{{ ec2.instances }}"
  when: ec2.instances is defined and ec2.instances

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    delay: 60
    timeout: 320
    state: started
  loop: "{{ ec2.instances }}"